Проверить версию менеджера пакетов
cargo --version

Проверить версию компилятора
rustc --version

Документация в браузере (у меня не работает)
rustc doc
Реально работает
rustup doc

Оглавление
5uS1JtRpfHw0owGD9c:link проект "Hello Word!"
E8uZGuKQGoXYBacNDu:link описание основных команд cargo

/code/io/console.rs - самый простой файл, тут также создаются переменные

\code\manage.rs - управляющие конструкции

/code/varsanderrors/vars.rs - переменные, ссылки, кортежи, ошибки и т.п.

DoSIB5HLcFKAvqx5Kh:link
	\code\enums\enums.rs - описание стандартных перечислений

5BaC0do3JexEWC6jwB:link описание ввода-вывода на консоль. См. файлы
	/code/io/console.rs

ITyHVqeXy1i4pCBB4s:link описание ввода-вывода
	/code/io/io.rs

----------------------------------------------------------------
----------------------------------------------------------------
5uS1JtRpfHw0owGD9c: decl
Проект "Hello Word!" .
см. папку /code/1/

Ручная компиляция
Для компиляции нужно запустить команду
rustc main.rs

----------------------------------------------------------------
----------------------------------------------------------------
E8uZGuKQGoXYBacNDu: decl
cargo
--------
Создание проекта
cargo new projectName

"projectName" - название проекта. Создаёт папку projectName в текущей директории
Сразу создаёт файл-проект "Hello World!" и каталог для git-репозитория.

Флаг --vcs создаёт проект без репозитория либо с выбранной системой контроля версий (hg)
cargo new projectName --vcs none


Cargo.toml - файл проекта

В принципе, проект можно создать вручную, просто создав файл Cargo.toml и поместив код в каталог src.
В файле записано, кто создал проект, включая e-mail. Осторожно!

--------
Из директории проекта для билда нужно вызвать
cargo build

Выходные файлы будут созданы в директории target/debug/projectName

Файл .cargo-lock содержит зависимости с точными версиями. Он всегда создаётся автоматически.

cargo билдит только то, что не изменилось.

--------
cargo build --release

Собирает релиз

--------
cargo check
Проверка на синтаксическую правильность без компиляции

--------
Команда
cargo run
сбилдит проект и запустит исполняемый файл

----------------------------------------------------------------
Для подключения внешнего крейта (crate) нужно изменить файл Cargo.toml

Например
[dependencies]
rand = "0.5.5"

Менеджер пакетов Cargo автоматически скачает указанные пакеты по команде cargo build
(обновляется их реестр библиотек очень долго)

Cargo понимает семантическое версионирование (иногда называемое SemVer https://semver.org )
Число 0.5.5 является укороченной версией ^0.5.5, которая подразумевает “любая версия которая имеет публичный API совместимый с версией 0.5.5.” Совместимым считается пакет той же минорной версии (то есть изменяется только последнее число).
Поэтому, он может выдать что-нибудь типа
"Compiling rand v0.5.6"

При этом он также загрузит все зависимости.


Реальная версия крейта rand, скачанная в первый раз, будет записана в .cargo-lock. Далее она не будет обновляться, пока версию не поменяют вручную (чтобы обеспечить стабильность приложения).


--------
Команда
cargo update

вызовет обновление библиотек с игнорированием .cargo-lock. При этом он скачает ту же минорную версию, что указана в зависимостях. То есть версию 0.6.0 он не скачает. Он скачает только patch с исправлениями.


--------
Команда
cargo doc --open

соберёт (сбилдит) документацию по всем крейтам проекта и откроет её в браузере

----------------------------------------------------------------
----------------------------------------------------------------



