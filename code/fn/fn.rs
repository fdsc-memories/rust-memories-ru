// Функции и переменные пишутся все маленькими буквами, но между словами вставляются подчёркивания
// Иначе будут предупреждения компилятора

// Отключим предупреждения компилятора о нарушении правил именования функций
#![allow(non_snake_case)]

// Такие атрибуты можно передавать и через параметры командной строки
// rustc -A dead_code main.rs
// RUSTFLAGS="$RUSTFLAGS -A dead_code" cargo build

// Как и в иных названиях, подчёркивания в начале подавляют предупреждения компилятора о неиспользовании
// В сигнатуре функции описание типов параметров обязательно
fn _add_byte(x: u128, _c: u8) -> u128
{
	// Последнее значение в функции является её возвращаемым значением
	// Обратите внимание - здесь нет ";", иначе последним будет пустой оператор
	x + u128::from(_c)
}

fn _add_16(x: u128, _c: u16) -> u128
{
	// Можно использовать и слово return
	// Здесь ";" допустима
	return x + u128::from(_c);
}

// Функция ничего не возвращает
// Отключим предупреждения компилятора о неиспользуемом коде
#[allow(dead_code)]
fn emptyResult1() -> ()
{}


// Функция ничего не возвращает, опускаем -> ()
#[allow(dead_code)]
fn emptyResult2()
{}

fn main()
{
}
